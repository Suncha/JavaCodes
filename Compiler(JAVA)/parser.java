
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 03 22:26:32 EDT 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 03 22:26:32 EDT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\004\000\002\012" +
    "\003\000\002\012\004\000\002\022\002\000\002\003\012" +
    "\000\002\013\003\000\002\013\005\000\002\005\004\000" +
    "\002\005\003\000\002\004\006\000\002\004\005\000\002" +
    "\021\003\000\002\021\005\000\002\011\003\000\002\011" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\012\000\002" +
    "\014\003\000\002\014\005\000\002\015\003\000\002\015" +
    "\005\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\005\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\004\021\005\001\002\000\004\004\101\001" +
    "\002\000\004\010\012\001\002\000\004\002\011\001\002" +
    "\000\006\004\uffff\021\005\001\002\000\004\004\ufffe\001" +
    "\002\000\004\002\000\001\002\000\010\022\013\024\017" +
    "\025\015\001\002\000\012\006\ufff0\007\ufff0\011\ufff0\023" +
    "\ufff0\001\002\000\004\011\022\001\002\000\012\006\ufff1" +
    "\007\ufff1\011\ufff1\023\ufff1\001\002\000\006\007\020\011" +
    "\uffe8\001\002\000\012\006\uffef\007\uffef\011\uffef\023\uffef" +
    "\001\002\000\010\022\013\024\017\025\015\001\002\000" +
    "\004\011\uffe7\001\002\000\004\005\023\001\002\000\014" +
    "\013\030\021\031\022\013\024\017\025\015\001\002\000" +
    "\004\006\ufffd\001\002\000\004\023\075\001\002\000\006" +
    "\006\ufffb\007\073\001\002\000\006\006\ufff8\007\ufff8\001" +
    "\002\000\012\021\031\022\013\024\017\025\015\001\002" +
    "\000\004\010\032\001\002\000\012\014\035\022\013\024" +
    "\017\025\015\001\002\000\006\007\070\011\ufff5\001\002" +
    "\000\004\011\067\001\002\000\006\017\042\020\043\001" +
    "\002\000\006\007\ufff2\011\ufff2\001\002\000\006\007\ufff3" +
    "\011\ufff3\001\002\000\004\015\uffe4\001\002\000\004\015" +
    "\uffe3\001\002\000\006\007\065\015\uffe2\001\002\000\006" +
    "\007\063\015\uffe0\001\002\000\004\015\045\001\002\000" +
    "\004\012\046\001\002\000\004\021\047\001\002\000\004" +
    "\010\050\001\002\000\014\017\052\020\054\022\053\024" +
    "\057\025\055\001\002\000\004\011\062\001\002\000\006" +
    "\007\uffeb\011\uffeb\001\002\000\006\007\uffed\011\uffed\001" +
    "\002\000\006\007\uffea\011\uffea\001\002\000\006\007\uffee" +
    "\011\uffee\001\002\000\006\007\060\011\uffe6\001\002\000" +
    "\006\007\uffec\011\uffec\001\002\000\014\017\052\020\054" +
    "\022\053\024\057\025\055\001\002\000\004\011\uffe5\001" +
    "\002\000\006\007\uffe9\011\uffe9\001\002\000\004\020\043" +
    "\001\002\000\004\015\uffdf\001\002\000\004\017\042\001" +
    "\002\000\004\015\uffe1\001\002\000\006\006\ufff7\007\ufff7" +
    "\001\002\000\012\014\035\022\013\024\017\025\015\001" +
    "\002\000\004\011\ufff4\001\002\000\006\006\ufff9\007\ufff9" +
    "\001\002\000\014\013\030\021\031\022\013\024\017\025" +
    "\015\001\002\000\004\006\ufffa\001\002\000\010\022\013" +
    "\024\017\025\015\001\002\000\006\006\ufff6\007\ufff6\001" +
    "\002\000\004\006\100\001\002\000\006\004\ufffc\021\ufffc" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\010\002\005\003\006\012\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\006\012\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\015\014\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\015\014\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\026\005\025\006" +
    "\024\013\023\001\001\000\004\022\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\071\006\024\001\001\000\002\001\001\000\012\006\036" +
    "\010\035\011\032\021\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\043\017\037\020\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\055\015\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\055\015\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\063\001\001\000\002\001\001\000\004" +
    "\017\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\036\010\035\011\032\021\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\026\005\025\006" +
    "\024\013\073\001\001\000\002\001\001\000\004\006\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
 public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
      if (s.left >= 0) {
        m.append(" in line "+(s.left+1));
        if (s.right >= 0)
          m.append(", column "+(s.right+1));
      }
    }
    m.append(" : "+message);
    //System.err.println(m);
  }

  public void report_fatal_error(String message, Object info) 
    throws Exception {
    report_error(message, info);
    Exception e=null;
    throw e;
    //System.exit(1);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // hash_list ::= HASH COMMA hash_list 
            {
              Vector<Argument> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Argument> hl = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
		Argument arg = new Argument();
		arg.setArgName(h.toUpperCase());		
		hl.add(0,arg);
		RESULT = hl;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hash_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // hash_list ::= HASH 
            {
              Vector<Argument> RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<Argument> argvec= new Vector<Argument>();
		Argument arg = new Argument();
		arg.setArgName(h.toUpperCase());
		argvec.add(arg);
		RESULT = argvec;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("hash_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // star_list ::= STAR COMMA star_list 
            {
              Vector<Argument> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Argument> sl = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
		Argument ar = new Argument();
		ar.setArgName(s.toUpperCase());
		sl.add(0,ar);
		RESULT = sl;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // star_list ::= STAR 
            {
              Vector<Argument> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Vector<Argument> argvec= new Vector<Argument>();
		Argument ar = new Argument();
		ar.setArgName(s.toUpperCase());
		argvec.add(ar);
		RESULT = argvec;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // star_list_or_hash_list ::= hash_list 
            {
              Vector<Argument> RESULT =null;
		int hlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Argument> hl = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = hl;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_list_or_hash_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // star_list_or_hash_list ::= star_list 
            {
              Vector<Argument> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Argument> sl = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = sl;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_list_or_hash_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_arg_list ::= simple_arg COMMA simple_arg_list 
            {
              Vector<Argument> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Argument> al = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	al.add(0,ar);
		RESULT = al;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_arg_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simple_arg_list ::= simple_arg 
            {
              Vector<Argument> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Vector<Argument> argvec = new Vector<Argument>();
		argvec.add(ar);
		RESULT = argvec;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_arg_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // regular_arg_list ::= regular_arg COMMA regular_arg_list 
            {
              Vector<Argument> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Argument> al = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
		al.add(0,ar);
		RESULT = al;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regular_arg_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // regular_arg_list ::= regular_arg 
            {
              Vector<Argument> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Vector<Argument> argvec = new Vector<Argument>();
		argvec.add(ar);
		RESULT = argvec;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regular_arg_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // complex_arg ::= LBRACKET star_list_or_hash_list RBRACKET COLON NAME LPAREN simple_arg_list RPAREN 
            {
              Argument RESULT =null;
		int shleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int shright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector<Argument> sh = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Argument> sa = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	Predicate pd = new Predicate();
		pd.setPredName(n.toUpperCase());
		pd.setArguments(sa);	
	
		Argument ar = new Argument();
		ar.setComplex(true);
		ar.setComplexPredicate(pd);
		ar.setNumberOfStarsOrHashes(sh);
		if(ar.getNumberOfStarsOrHashes() >=1){
			Argument arg=sh.firstElement();
			ar.setArgName(arg.getArgName().toUpperCase());
		}
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_arg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_arg ::= HASH 
            {
              Argument RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			Argument ar = new Argument();
		ar.setArgName(h.toUpperCase());
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_arg ::= STAR 
            {
              Argument RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Argument ar = new Argument();
		ar.setArgName(s.toUpperCase());
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple_arg ::= VARIABLE 
            {
              Argument RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Argument ar = new Argument();
		ar.setArgName(v.toUpperCase());
		if(v.equalsIgnoreCase("_")){
			ar.setUnderscore(true);
		}
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simple_arg ::= STRING 
            {
              Argument RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Argument ar = new Argument();
		ar.setArgDataType("STRING");
		ar.setArgValue(s);
		ar.setConstant(true);
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // simple_arg ::= NUMBER 
            {
              Argument RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Argument ar = new Argument();
		ar.setArgDataType("NUMBER");
		ar.setArgValue(n);
		ar.setConstant(true);
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_arg",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // regular_arg ::= VARIABLE 
            {
              Argument RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Argument ar = new Argument();
		ar.setArgName(v.toUpperCase());
		if(v.equalsIgnoreCase("_")){
			ar.setUnderscore(true);
		}
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regular_arg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // regular_arg ::= STRING 
            {
              Argument RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Argument ar = new Argument();
		ar.setArgDataType("STRING");
		ar.setArgValue(s);
		ar.setConstant(true);
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regular_arg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // regular_arg ::= NUMBER 
            {
              Argument RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Argument ar = new Argument();
		ar.setArgDataType("NUMBER");
		ar.setArgValue(n);
		ar.setConstant(true);
		RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regular_arg",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arg ::= complex_arg 
            {
              Argument RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arg ::= regular_arg 
            {
              Argument RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = ar;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arg_list ::= arg COMMA arg_list 
            {
              Vector<Argument> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Argument> al = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	al.add(0,ar);
		RESULT = al;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arg_list ::= arg 
            {
              Vector<Argument> RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument ar = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
		Vector<Argument> argvec = new Vector<Argument>();
		argvec.add(ar);
		RESULT = argvec;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // predicate ::= regular_arg COMPARISON regular_arg 
            {
              Predicate RESULT =null;
		int ra1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ra1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument ra1 = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ra2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ra2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argument ra2 = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	Predicate pd = new Predicate();
		pd.setComparison(true);
		pd.setLeftOperand(ra1);
		pd.setRightOperand(ra2);
		pd.setComparisonOperator(c);
		RESULT = pd;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // predicate ::= NAME LPAREN arg_list RPAREN 
            {
              Predicate RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Argument> al = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	Predicate pd = new Predicate();
		pd.setPredName(n.toUpperCase());
		pd.setArguments(al);
		RESULT = pd;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literal ::= predicate 
            {
              Predicate RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate pd = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		RESULT = pd;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // literal ::= NOTOP predicate 
            {
              Predicate RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate pd = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	pd.setNegated(true);
		RESULT = pd;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // idb_body ::= literal COMMA idb_body 
            {
              Vector<Predicate> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Predicate lit = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ibleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Predicate> ib = (Vector<Predicate>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	ib.add(0,lit);
		RESULT = ib;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idb_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // idb_body ::= literal 
            {
              Vector<Predicate> RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Predicate lit = (Predicate)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		Vector<Predicate> pd = new Vector<Predicate>();
		pd.add(lit);
		RESULT = pd;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idb_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // idb_rule ::= NAME LPAREN regular_arg_list RPAREN IMPLIES idb_body NT$0 PERIOD 
            {
              Rule RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Rule) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int regarglleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int regarglright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector<Argument> regargl = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<Predicate> b = (Vector<Predicate>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("idb_rule",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Rule RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int regarglleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int regarglright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector<Argument> regargl = (Vector<Argument>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Predicate> b = (Vector<Predicate>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 	
		Predicate pd = new Predicate();
		pd.setPredName(n.toUpperCase());
		pd.setArguments(regargl);
		Rule r = new Rule();
		r.setHeadPredicate(pd);
		r.setBodyPredicates(b);
		RESULT = r;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // idb_rules ::= idb_rule idb_rules 
            {
              Vector<Rule> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Rule i = (Rule)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int irsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int irsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<Rule> irs = (Vector<Rule>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
		irs.add(0,i);
		RESULT = irs;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idb_rules",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // idb_rules ::= idb_rule 
            {
              Vector<Rule> RESULT =null;
		int irleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int irright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Rule ir = (Rule)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
		Vector<Rule> vrule = new Vector<Rule>();
		vrule.add(ir);
		RESULT = vrule;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idb_rules",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ddb EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ddb ::= idb_rules DOLLAR 
            {
              Program RESULT =null;
		int irleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Rule> ir = (Vector<Rule>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	Program prog = new Program();
		prog.setRules(ir);
		RESULT = prog;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ddb",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

